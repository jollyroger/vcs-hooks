#!/bin/sh
#
# git post-receive hook.
#
# This script will update files on the the web-server transparently using rsync
# remotely or on the local machine

# This is a common prefix for a refname in git
REFNAME_PREFIX=refs/heads

#------------------------------------------------------------------------------
# Function which updates the server
#------------------------------------------------------------------------------
# Check if some update is already running. If this update has revision older
# than revision we want to update then just wait until lock is freezed or new
# update is taking place.

update_server() {
    local TARGET=
    local BRANCH=${1##*/}
    local OLDREV=$2
    local NEWREV=$3

    local DEPLOY_SERVER=`git-config -f config --get branch.$BRANCH.deploy-server`
    local DEPLOY_DIR=`git-config -f config --get branch.$BRANCH.deploy-dir`
    local DEPLOY_USER=`git config -f config --get branch.$BRANCH.deploy-user`

    # Check wether deployment
    if [ -z "$DEPLOY_DIR" ] ; then
        return 1
    fi

    # detect wether local or remote synchronization is needed
    if [ -z "$DEPLOY_SERVER" ] ; then
        TARGET="$DEPLOY_DIR"
    else
        if [ -z "$DEPLOY_USER" ] ; then
            DEPLOY_USER=$USER
        fi
        TARGET="$DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_DIR"
    fi

    echo Preparing branch $BRANCH for sync with server
    TEMPDIR=`mktemp -d`

    git archive $NEWREV|tar xmf - -C $TEMPDIR

    echo Sync with server
    rsync -rcv --delete $TEMPDIR/ $TARGET/

    echo Cleaning..
    rm -fR $TEMPDIR

    echo Done
}

#------------------------------------------------------------------------------
# Main starts here
#------------------------------------------------------------------------------
# Get the changes in branches and initiate the deployment one by one (if there
# are any changes on the respective branches).

while read oldrev newrev refname
do
    update_server $refname $oldrev $newrev
done
